% if settings.method != 'modwsgi':
#!/usr/bin/env paster

[exe]
command = serve
%   if not settings.develop:
daemon = true
pid-file = ./${settings.name.rpartition('.')[0]}.pid
log-file = ./${settings.name.rpartition('.')[0]}.log
%   endif

[server:main]
%   if settings.method == 'http':
use = egg:Paste#http
%       if settings['socket.kind'] == 'port':
host = ${settings['socket.interface']}
port = ${settings['socket.port']}
%       else:
socket = ${settings['socket.path']}
umask = 0
%       endif
% elif settings.method == 'fastcgi':
use = egg:Flup#fcgi_thread
%       if settings['socket.kind'] == 'port':
host = ${settings['socket.interface']}
port = ${settings['socket.port']}
%       else:
socket = ${settings['socket.path']}
umask = 0
%       endif
%   endif
% endif

[app:main]
use = egg:WebCore
% if settings.develop:
debug = True
% endif

web.root = web.extras.contentment.components.asset.controller:AssetController

web.sessions = True
web.cache = True
web.static = True
web.static.path = ${settings['static.path']}
web.compress = False
web.templating.engine = mako

image.cache.path = ${__import__('os.path').path.join(settings['static.path'], 'cache')}
image.cache.url = /cache

db.connections = mongo
db.mongo.engine = web.db.mongoengine_:MongoEngineMiddleware
db.mongo.model = web.extras.contentment.core
db.mongo.url = ${settings.db}

web.auth = True
web.auth.name = uid
web.auth.lookup = web.extras.contentment.components.identity.model:Identity.lookup
web.auth.authenticate = web.extras.contentment.components.identity.model:Identity.authenticate
web.auth.handler = /users/action:authenticate

web.sessions.auto = True
web.cache.data_dir = ${__import__('os.path').path.join(settings['data.path'], 'cache')}
web.sessions.data_dir = ${__import__('os.path').path.join(settings['data.path'], 'sessions')}
web.sessions.lock_dir = ${__import__('os.path').path.join(settings['data.path'], 'locks')}
web.sessions.cookie_expires = False
web.sessions.key = session
web.sessions.secret = ${__import__('web.extras.contentment.lib').extras.contentment.lib.randpass(32, 64)}
web.sessions.secure = False


[loggers]
keys = root, contentment, webcore

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = ${"INFO" if settings.develop else "WARN"}
handlers = console

[logger_contentment]
level = ${"DEBUG" if settings.develop else "INFO"}
handlers = console
qualname = web.extras.contentment
propagate = 0

[logger_webcore]
level = ${"INFO" if settings.develop else "WARN"}
handlers = console
qualname = web
propagate = 0

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
